From 14791ae6027bf49199631f5411ffc2df46ff9de2 Mon Sep 17 00:00:00 2001
From: Nothing-Dev <alfredomartinez_1423@hotmail.com>
Date: Fri, 18 Dec 2015 10:43:37 -0430
Subject: [PATCH] Remove MaxiCM Perfomance Settings (temporary)

Remove because generate errors in compilation

Signed-off-by: Nothing-Dev <alfredomartinez_1423@hotmail.com>
---
 res/drawable-hdpi/ic_maxi_settings_performance.png | Bin 16421 -> 0 bytes
 res/drawable-mdpi/ic_maxi_settings_performance.png | Bin 16036 -> 0 bytes
 .../ic_maxi_settings_performance.png               | Bin 16684 -> 0 bytes
 .../ic_maxi_settings_performance.png               | Bin 17530 -> 0 bytes
 res/drawable/ic_maxi_performance_tint.xml          |  20 -
 res/values/maxi_strings.xml                        |  46 --
 res/xml/dashboard_categories.xml                   |   8 -
 res/xml/maxi_performance_settings.xml              |  78 ----
 src/com/android/settings/maxi/IOScheduler.java     | 124 ------
 src/com/android/settings/maxi/Maxiperformance.java | 488 ---------------------
 src/com/android/settings/maxi/Processor.java       | 342 ---------------
 11 files changed, 1106 deletions(-)
 delete mode 100644 res/drawable-hdpi/ic_maxi_settings_performance.png
 delete mode 100644 res/drawable-mdpi/ic_maxi_settings_performance.png
 delete mode 100644 res/drawable-xhdpi/ic_maxi_settings_performance.png
 delete mode 100644 res/drawable-xxhdpi/ic_maxi_settings_performance.png
 delete mode 100644 res/drawable/ic_maxi_performance_tint.xml
 delete mode 100644 res/xml/maxi_performance_settings.xml
 delete mode 100644 src/com/android/settings/maxi/IOScheduler.java
 delete mode 100644 src/com/android/settings/maxi/Maxiperformance.java
 delete mode 100644 src/com/android/settings/maxi/Processor.java

diff --git a/res/drawable-hdpi/ic_maxi_settings_performance.png b/res/drawable-hdpi/ic_maxi_settings_performance.png
deleted file mode 100644
index 51d84635c73fc539d9d8a64c6d20d383e57f25b5..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 16421
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

diff --git a/res/drawable-mdpi/ic_maxi_settings_performance.png b/res/drawable-mdpi/ic_maxi_settings_performance.png
deleted file mode 100644
index 708f491f787141df197e592d4abe48e887cd75d5..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 16036
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

diff --git a/res/drawable-xhdpi/ic_maxi_settings_performance.png b/res/drawable-xhdpi/ic_maxi_settings_performance.png
deleted file mode 100644
index 9a387e134d633b471736224d2e9b87a01d38fafc..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 16684
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

diff --git a/res/drawable-xxhdpi/ic_maxi_settings_performance.png b/res/drawable-xxhdpi/ic_maxi_settings_performance.png
deleted file mode 100644
index 51a524d6be40162ba82990efc4eb9ac7fd742840..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 17530
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
a5-@o|{c?8yG!xDLwg~hKVIT2{UHxy$)3~Sr

diff --git a/res/drawable/ic_maxi_performance_tint.xml b/res/drawable/ic_maxi_performance_tint.xml
deleted file mode 100644
index 586a1e7..0000000
--- a/res/drawable/ic_maxi_performance_tint.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-     Copyright (C) 2015 The MaxiCM Project
-
-      Licensed under the Apache License, Version 2.0 (the "License");
-      you may not use this file except in compliance with the License.
-      You may obtain a copy of the License at
-
-           http://www.apache.org/licenses/LICENSE-2.0
-
-      Unless required by applicable law or agreed to in writing, software
-      distributed under the License is distributed on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-      See the License for the specific language governing permissions and
-      limitations under the License.
--->
-
-<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
-    android:src="@drawable/ic_maxi_settings_performance"
-    android:tint="@color/theme_accent" />
diff --git a/res/values/maxi_strings.xml b/res/values/maxi_strings.xml
index 282f483..fb96dcf 100644
--- a/res/values/maxi_strings.xml
+++ b/res/values/maxi_strings.xml
@@ -34,53 +34,7 @@
     <!-- Device mem info -->
     <string name="mem_info">RAM</string>
 
-    <!--MaxiCM Performance Settings--> 	
-    <string name="maxi_performance_settings">MaxiCM Performance Settings</string>
-    <string name="performance_settings_warning">No Profiles Found</string>
-    <string name="performance_settings_warning_title">Proceed with caution</string>
-
-    <!-- Performance Settings : I/O scheduler settings title -->
-    <string name="io_scheds_title">I/O scheduler</string>
-
-    <!-- Performance Settings : I/O scheduler settings sub items -->
-    <string name="io_sched_title">I/O scheduler</string>
-    <string name="io_sched_summary" translatable="false">%S</string>
-
-    <!-- Performance Settings : Set on boot option -->
-    <string name="performance_set_on_boot">Set on boot</string>
-    <string name="performance_set_on_boot_summary">Restore the settings on boot</string>
-
-    <!-- Performance Settings : Processor Settings -->
-    <!-- Performance Settings : Processor settings title -->
-    <string name="processor_title">Processor</string>
-
-    <!-- Performance Settings-->
-    <string name="background_apps">Apps</string>
-    <string name="maxi_boot">Boot Options</string>
-
-    <!--Graphics-->
-    <string name="graphics_title">Graphic Tweaks</string>
-    <string name="maxi_force_graphics_ui">Force GPU</string>
-    <string name="maxi_disable_hw">GPU Tweak</string>
-    <string name="maxi_disable_hw_summary">Use GPU for composing screen</string>
-    <string name="maxi_force_graphics_ui_summary">Force the GPU to be used instead of CPU for 2D drawings</string>
-    <string name="warning_gpu">Warning!!</string>	
-    <string name="message_gpu">If You Enter Developer Options, This Option will Reset itself</string>
-
-    <!-- Performance Settings : Processor settings sub items -->
-    <string name="cpu_cur_freq_title">Current CPU frequency</string>
-    <string name="cpu_governors_title">CPU governor</string>
-    <string name="cpu_governors_summary" translatable="false">%S</string>
-    <string name="cpu_min_freq_title">Minimum CPU frequency</string>
-    <string name="cpu_min_freq_summary" translatable="false">%s</string>
-    <string name="cpu_max_freq_title">Maximum CPU frequency</string>
-    <string name="cpu_max_freq_summary" translatable="false">%s</string>
-
     <!-- Fast charge -->
     <string name="pref_force_fast_charge_title">Fast charge</string>
 
-    <!-- Development : Force high-end graphics -->
-    <string name="pref_force_highend_gfx_title">Force high-end graphics</string>
-    <string name="pref_force_highend_gfx_summary">Enables high-end visual effects.Proceed with Caution, highly experimental</string>
-
 </resources>
diff --git a/res/xml/dashboard_categories.xml b/res/xml/dashboard_categories.xml
index bc1aa31..1a7d590 100644
--- a/res/xml/dashboard_categories.xml
+++ b/res/xml/dashboard_categories.xml
@@ -105,14 +105,6 @@
                 android:fragment="com.android.settings.maxi.MaxiUiSettings"
                 android:icon="@drawable/ic_maxi_settings"
                 />
-
-        <!-- MaxiCM Performance Settings -->
-        <dashboard-tile
-             android:id="@+id/maxi_performance_settings"
-             android:title="@string/maxi_performance_settings"
-             android:fragment="com.android.settings.maxi.Maxiperformance"
-             android:icon="@drawable/ic_maxi_performance_tint"
-                />
     </dashboard-category>
 
     <!-- DEVICE -->
diff --git a/res/xml/maxi_performance_settings.xml b/res/xml/maxi_performance_settings.xml
deleted file mode 100644
index 7ca8a81..0000000
--- a/res/xml/maxi_performance_settings.xml
+++ /dev/null
@@ -1,78 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2015 MaxiCM
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-          http://www.apache.org/licenses/LICENSE-2.0
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<PreferenceScreen
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:title="@string/maxi_performance_settings"
-    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
-
-    <!-- Performance -->
-    <ListPreference
-            android:key="pref_perf_profile"
-            android:dialogTitle="@string/perf_profile_title"
-            android:title="@string/perf_profile_title"
-            android:persistent="false" />
-
-    <com.android.settings.cyanogenmod.SecureSettingSwitchPreference
-            android:key="app_perf_profiles_enabled"
-            android:title="@string/autoperf_title"
-            android:summary="@string/autoperf_summary"
-            android:defaultValue="true" />
-
-    <PreferenceCategory
-        android:key="perf_system_prefs"
-        android:title="@string/accessibility_system_title">
-
-    <PreferenceScreen
-            android:key="processor"
-            android:fragment="com.android.settings.maxi.Processor"
-            android:title="@string/processor_title" />
-
-    <PreferenceScreen
-            android:key="ioscheduler"
-            android:fragment="com.android.settings.maxi.IOScheduler"
-            android:title="@string/io_scheds_title" />
-
-    </PreferenceCategory>
-
-        <PreferenceCategory
-        android:key="perf_graphics_prefs"
-        android:title="@string/graphics_title">
-
-        <SwitchPreference
-            android:key="pref_force_highend_gfx"
-            android:title="@string/pref_force_highend_gfx_title"
-            android:summary="@string/pref_force_highend_gfx_summary" />
-	<SwitchPreference
-                android:key="force_hw_ui"
-                android:title="@string/maxi_force_graphics_ui"
-                android:summary="@string/maxi_force_graphics_ui_summary"/>
-        <SwitchPreference
-                android:key="disable_overlays"
-                android:title="@string/maxi_disable_hw"
-                android:summary="@string/maxi_disable_hw_summary"/>
-	</PreferenceCategory>
-
-        <PreferenceCategory 
-   	 android:key="proc_limit"
-    	 android:title="@string/background_apps">
-
-        <ListPreference
-            android:key="app_process_limit"
-            android:title="@string/app_process_limit_title"
-            android:persistent="false"
-            android:entries="@array/app_process_limit_entries"
-            android:entryValues="@array/app_process_limit_values" />
-        </PreferenceCategory>
-
-</PreferenceScreen>
diff --git a/src/com/android/settings/maxi/IOScheduler.java b/src/com/android/settings/maxi/IOScheduler.java
deleted file mode 100644
index cc3e240..0000000
--- a/src/com/android/settings/maxi/IOScheduler.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright (C) 2012 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.settings.maxi;
-
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceScreen;
-
-import com.android.settings.R;
-import com.android.settings.SettingsPreferenceFragment;
-import com.android.settings.Utils;
-
-//
-// I/O Scheduler Related Settings
-//
-public class IOScheduler extends SettingsPreferenceFragment implements
-        Preference.OnPreferenceChangeListener {
-
-    public static final String IOSCHED_PREF = "pref_io_sched";
-    public static final String IOSCHED_LIST_FILE = "/sys/block/mmcblk0/queue/scheduler";
-
-    public static final String SOB_PREF = "pref_io_sched_set_on_boot";
-
-    private static final String TAG = "IOScheduler";
-
-    private String mIOSchedulerFormat;
-
-    private ListPreference mIOSchedulerPref;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mIOSchedulerFormat = getString(R.string.io_sched_summary);
-
-        String[] availableIOSchedulers = new String[0];
-        String availableIOSchedulersLine;
-        int bropen, brclose;
-        String currentIOScheduler = null;
-
-        addPreferencesFromResource(R.xml.ioscheduler_settings);
-
-        PreferenceScreen prefScreen = getPreferenceScreen();
-
-        mIOSchedulerPref = (ListPreference) prefScreen.findPreference(IOSCHED_PREF);
-
-        /* I/O scheduler
-        Some systems might not use I/O schedulers */
-        if (!Utils.fileExists(IOSCHED_LIST_FILE) ||
-            (availableIOSchedulersLine = Utils.fileReadOneLine(IOSCHED_LIST_FILE)) == null) {
-            prefScreen.removePreference(mIOSchedulerPref);
-
-        } else {
-            availableIOSchedulers = availableIOSchedulersLine.replace("[", "").replace("]", "").split(" ");
-            bropen = availableIOSchedulersLine.indexOf("[");
-            brclose = availableIOSchedulersLine.lastIndexOf("]");
-            if (bropen >= 0 && brclose >= 0)
-                currentIOScheduler = availableIOSchedulersLine.substring(bropen + 1, brclose);
-
-            mIOSchedulerPref.setEntryValues(availableIOSchedulers);
-            mIOSchedulerPref.setEntries(availableIOSchedulers);
-            if (currentIOScheduler != null)
-                mIOSchedulerPref.setValue(currentIOScheduler);
-            mIOSchedulerPref.setSummary(String.format(mIOSchedulerFormat, currentIOScheduler));
-            mIOSchedulerPref.setOnPreferenceChangeListener(this);
-        }
-    }
-
-    @Override
-    public void onResume() {
-        String availableIOSchedulersLine;
-        int bropen, brclose;
-        String currentIOScheduler;
-
-        super.onResume();
-
-        if (Utils.fileExists(IOSCHED_LIST_FILE) &&
-            (availableIOSchedulersLine = Utils.fileReadOneLine(IOSCHED_LIST_FILE)) != null) {
-            bropen = availableIOSchedulersLine.indexOf("[");
-            brclose = availableIOSchedulersLine.lastIndexOf("]");
-            if (bropen >= 0 && brclose >= 0) {
-                currentIOScheduler = availableIOSchedulersLine.substring(bropen + 1, brclose);
-                mIOSchedulerPref.setSummary(String.format(mIOSchedulerFormat, currentIOScheduler));
-            }
-        }
-    }
-
-    public boolean onPreferenceChange(Preference preference, Object newValue) {
-        String fname = "";
-
-        if (newValue != null) {
-            if (preference == mIOSchedulerPref) {
-                fname = IOSCHED_LIST_FILE;
-            }
-
-            if (Utils.fileWriteOneLine(fname, (String) newValue)) {
-                if (preference == mIOSchedulerPref) {
-                    mIOSchedulerPref.setSummary(String.format(mIOSchedulerFormat, (String) newValue));
-                }
-                return true;
-            } else {
-                return false;
-            }
-        }
-        return false;
-    }
-}
diff --git a/src/com/android/settings/maxi/Maxiperformance.java b/src/com/android/settings/maxi/Maxiperformance.java
deleted file mode 100644
index f500ff1..0000000
--- a/src/com/android/settings/maxi/Maxiperformance.java
+++ /dev/null
@@ -1,488 +0,0 @@
-/*
- * Copyright (C) 2015 MaxiCM
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.settings.maxi;
-
-import android.app.Activity;
-import android.app.ActivityManager;
-import android.app.ActivityManagerNative;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.ContentResolver;
-import android.content.Intent;
-import android.app.admin.DevicePolicyManager;
-import android.content.pm.PackageManager;
-import android.content.pm.PackageManager.NameNotFoundException;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.database.ContentObserver;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.PowerManager;
-import com.android.internal.os.PowerProfile;
-import android.os.SystemProperties;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceCategory;
-import android.preference.PreferenceScreen;
-import android.preference.SwitchPreference;
-import android.provider.Settings;
-import android.content.res.Resources;
-import android.os.BatteryManager;
-import android.os.BatteryStats;
-import android.os.UserHandle;
-import android.os.UserManager;
-import android.os.ServiceManager;
-import android.os.IBinder;
-import android.os.Parcel;
-import android.os.AsyncTask;
-import android.os.RemoteException;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.util.Log;
-import android.widget.Switch;
-import com.android.settings.DevelopmentSettings;
-import com.android.settings.R;
-import com.android.settings.SettingsPreferenceFragment;
-import com.android.settings.maxi.IOScheduler;
-import com.android.settings.maxi.Processor;
-import com.android.settings.Utils;
-import com.android.settings.SettingsActivity;
-import com.android.settings.widget.SwitchBar;
-import android.text.TextUtils;
-import android.view.View;
-import android.view.Menu;
-import android.view.accessibility.AccessibilityManager;
-import android.view.HardwareRenderer;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.widget.TextView;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-
-
-public class Maxiperformance extends SettingsPreferenceFragment  implements Preference.OnPreferenceChangeListener , SwitchBar.OnSwitchChangeListener  {
-
-private static final String CATEGORY_PROFILES = "pref_perf_profile";
-private static final String FORCE_HIGHEND_GFX_PREF = "pref_force_highend_gfx";
-private static final String CATEGORY_IOSCHEDUlER = "ioscheduler";
-private static final String CATEGORY_PROCESSOR = "processor";
-private static final String CATEGORY_GRAPHICS = "perf_graphics_prefs";
-private static final String FORCE_HIGHEND_GFX_PERSIST_PROP = "persist.sys.force_highendgfx";
-private static final String APP_PROCESS_LIMIT_KEY = "app_process_limit";
-private static final String FORCE_HARDWARE_UI_KEY = "force_hw_ui";
-private PerformanceProfileObserver mPerformanceProfileObserver = null;
-private static final String DISABLE_OVERLAYS_KEY = "disable_overlays";
-private static final String HARDWARE_UI_PROPERTY = "persist.sys.ui.hw";
-public static final String PREF_SHOW = "show";
-public static final String PREF_FILE = "development";
-private String[] mPerfProfileEntries;
-private String[] mPerfProfileValues;
-private boolean mDontPokeProperties;
-private boolean mHaveDebugSettings;
-private boolean mLastEnabledState;
-private boolean mDialogClicked;
-private boolean mUnavailable;
-
-private AlertDialog mAlertDialog;
-private Dialog mEnableDialog;
-private PowerManager mPowerManager;
-private SharedPreferences mDevelopmentPreferences;
-private ListPreference mAppProcessLimit;
-private PreferenceScreen mProcessor;
-private PreferenceScreen mIOScheduler;
-private ListPreference mSystemCategory;
-private SwitchPreference mForceHighEndGfx;
-private SwitchPreference mForceHardwareUi;
-private SwitchPreference mDisableOverlays;
-private SwitchBar mSwitchBar;
-
-private final ArrayList<Preference> mAllPrefs = new ArrayList<Preference>();
-private final ArrayList<SwitchPreference> mResetSwitchPrefs = new ArrayList<SwitchPreference>();
-private final HashSet<Preference> mDisabledPrefs = new HashSet<Preference>();
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-	
-        mPerfProfileEntries= getResources().getStringArray(
-                com.android.internal.R.array.perf_profile_entries);
-        mPerfProfileValues = getResources().getStringArray(
-                com.android.internal.R.array.perf_profile_values);
-
-        addPreferencesFromResource(R.xml.maxi_performance_settings);
-	PreferenceScreen prefSet = getPreferenceScreen();
-	mProcessor = (PreferenceScreen) prefSet.findPreference(CATEGORY_PROCESSOR);
-        mIOScheduler = (PreferenceScreen) prefSet.findPreference(CATEGORY_IOSCHEDUlER);
-	mPowerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
-	mSystemCategory = (ListPreference) findPreference(CATEGORY_PROFILES);
-	mForceHighEndGfx = (SwitchPreference) prefSet.findPreference(FORCE_HIGHEND_GFX_PREF);
-	PreferenceCategory category = (PreferenceCategory) prefSet.findPreference(CATEGORY_GRAPHICS);
-	
-	//Look For Power Profiles
-        if (!mPowerManager.hasPowerProfiles()) {
-	prefSet.removePreference(mSystemCategory);
-	}
-	else {
-	prefSet.removePreference(mIOScheduler);
-	   prefSet.addPreference(mSystemCategory);
-	   prefSet.addPreference(category);
-		mAppProcessLimit = addListPreference(APP_PROCESS_LIMIT_KEY);
-	        mDisableOverlays = findAndInitSwitchPref(DISABLE_OVERLAYS_KEY);
-	    	mForceHardwareUi = findAndInitSwitchPref(FORCE_HARDWARE_UI_KEY);	
-	}
-	   mSystemCategory.setOrder(-1);
-           mSystemCategory.setEntries(mPerfProfileEntries);
-           mSystemCategory.setEntryValues(mPerfProfileValues);
-	   updatePerformanceValue();
-	   mSystemCategory.setOnPreferenceChangeListener(this);
-	   
-		String forceHighendGfx = SystemProperties.get(FORCE_HIGHEND_GFX_PERSIST_PROP, "false");
-        mForceHighEndGfx.setChecked("true".equals(forceHighendGfx));
-	updateAppProcessLimitOptions();	
-	}
-
-        boolean supported = false;
-        if (!supported) {
-		mAppProcessLimit = addListPreference(APP_PROCESS_LIMIT_KEY);
-	        mDisableOverlays = findAndInitSwitchPref(DISABLE_OVERLAYS_KEY);
-		mForceHardwareUi = findAndInitSwitchPref(FORCE_HARDWARE_UI_KEY);	
-
-	}
-		 prefSet.addPreference(category);
-	   	    mSystemCategory.setOrder(-1);
-            mSystemCategory.setEntries(mPerfProfileEntries);
-            mSystemCategory.setEntryValues(mPerfProfileValues);		
-	   updatePerformanceValue();
-	updateAppProcessLimitOptions();		
-	mSystemCategory.setOnPreferenceChangeListener(this);	
-	String forceHighendGfx = SystemProperties.get(FORCE_HIGHEND_GFX_PERSIST_PROP, "false");
-        mForceHighEndGfx.setChecked("true".equals(forceHighendGfx));					   
-        } else  {	
-            prefSet.removePreference(mIOScheduler);
-	}		
-	mPerformanceProfileObserver = new PerformanceProfileObserver(new Handler());	
-	
-	}
-	
-    
-	@Override
-    public void onResume() {
-        super.onResume();
-        if (mSystemCategory != null) {
-            updatePerformanceValue();
-            ContentResolver resolver = getActivity().getContentResolver();
-            resolver.registerContentObserver(Settings.Secure.getUriFor(
-                    Settings.Secure.PERFORMANCE_PROFILE), false, mPerformanceProfileObserver);
-       				 }
-	}
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        if (mSystemCategory != null) {
-            ContentResolver resolver = getActivity().getContentResolver();
-            resolver.unregisterContentObserver(mPerformanceProfileObserver);
-        }
-    }
-
-    private void updatePerformanceValue() {
-        if (mSystemCategory == null) {
-            return;
-        }
-        mSystemCategory.setValue(mPowerManager.getPowerProfile());
-        updatePerformanceSummary();
-	}	
-
-        public void onChange(boolean selfChange, Uri uri) {
-            updatePerformanceValue();
-        }
-
-    private void updatePerformanceSummary() {
-        String value = mPowerManager.getPowerProfile();
-        String summary = "";
-        int count = mPerfProfileValues.length;
-        for (int i = 0; i < count; i++) {
-            try {
-                if (mPerfProfileValues[i].equals(value)) {
-                    summary = mPerfProfileEntries[i];
-                }
-            } catch (IndexOutOfBoundsException ex) {
-                // Ignore
-            }
-        }
-        mSystemCategory.setSummary(String.format("%s", summary));
-    }
-
-    private class PerformanceProfileObserver extends ContentObserver {
-        public PerformanceProfileObserver(Handler handler) {
-            super(handler);
-        	}
-	}
-
- 	@Override
-    	public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
-        if (preference == mForceHighEndGfx) {
-            SystemProperties.set(FORCE_HIGHEND_GFX_PERSIST_PROP,
-                    mForceHighEndGfx.isChecked() ? "true" : "false");
-        } else {
-            // If we didn't handle it, let preferences handle it.
-            return super.onPreferenceTreeClick(preferenceScreen, preference);
-        	}
-
-        return true;
-    	}
-	
-	@Override
-    	public boolean onPreferenceChange(Preference preference, Object newValue) {
-        if (newValue != null) {
-		
-            if (preference == mSystemCategory) {
-                mPowerManager.setPowerProfile(String.valueOf(newValue));
-                updatePerformanceSummary();
-                return true;
-	}
-	else if (preference == mAppProcessLimit) {
-            writeAppProcessLimitOptions(newValue);
-            return true;
-	    }
-	 else if (preference == mForceHardwareUi) {
-            writeHardwareUiOptions();
-        } 
-	else if (preference == mDisableOverlays) {
-            writeDisableOverlaysOption();
-        	}
-	}	
-	        return false;		
-    }
-
-   @Override
-    public void onStop() {
-        super.onStop();
-    }
-
-
-    private void updateAppProcessLimitOptions() {
-        try {
-            int limit = ActivityManagerNative.getDefault().getProcessLimit();
-            CharSequence[] values = mAppProcessLimit.getEntryValues();
-            for (int i=0; i<values.length; i++) {
-                int val = Integer.parseInt(values[i].toString());
-                if (val >= limit) {
-                    if (i != 0) {
-                        mHaveDebugSettings = true;
-                    }
-                    mAppProcessLimit.setValueIndex(i);
-                    mAppProcessLimit.setSummary(mAppProcessLimit.getEntries()[i]);
-                    return;
-                }
-            }
-            mAppProcessLimit.setValueIndex(0);
-            mAppProcessLimit.setSummary(mAppProcessLimit.getEntries()[0]);
-        } catch (RemoteException e) {
-        }
-    }
-
- private void writeAppProcessLimitOptions(Object newValue) {
-        try {
-            int limit = newValue != null ? Integer.parseInt(newValue.toString()) : -1;
-            ActivityManagerNative.getDefault().setProcessLimit(limit);
-            updateAppProcessLimitOptions();
-        } catch (RemoteException e) {
-        }
-    }
-
-    private void updateHardwareUiOptions() {
-        updateSwitchPreference(mForceHardwareUi, SystemProperties.getBoolean(HARDWARE_UI_PROPERTY, true));
-    }
-
-    private void writeHardwareUiOptions() {
-	
-        SystemProperties.set(HARDWARE_UI_PROPERTY, mForceHardwareUi.isChecked() ? "true" : "false");
-	 pokeSystemProperties();
-    }
-
-       void pokeSystemProperties() {
-        if (!mDontPokeProperties) {
-            //noinspection unchecked
-            (new SystemPropPoker()).execute();
-        }
-    }
-
-    private void writeDisableOverlaysOption() {
-        try {
-            IBinder flinger = ServiceManager.getService("SurfaceFlinger");
-            if (flinger != null) {
-                Parcel data = Parcel.obtain();
-                data.writeInterfaceToken("android.ui.ISurfaceComposer");
-                final int disableOverlays = mDisableOverlays.isChecked() ? 1 : 0;
-                data.writeInt(disableOverlays);
-                flinger.transact(1008, data, null, 0);
-                data.recycle();
-
-                updateFlingerOptions();
-            }
-        } catch (RemoteException ex) {
-        }
-    }
-
- private void updateFlingerOptions()  {
-        try {
-            IBinder flinger = ServiceManager.getService("SurfaceFlinger");
-            if (flinger != null) {
-                Parcel data = Parcel.obtain();
-                Parcel reply = Parcel.obtain();
-                data.writeInterfaceToken("android.ui.ISurfaceComposer");
-                flinger.transact(1010, data, reply, 0);
-                @SuppressWarnings("unused")
-                int showCpu = reply.readInt();
-                @SuppressWarnings("unused")
-                int enableGL = reply.readInt();
-                int showUpdates = reply.readInt();
-                @SuppressWarnings("unused")
-                int showBackground = reply.readInt();
-                int disableOverlays = reply.readInt();
-                updateSwitchPreference(mDisableOverlays, disableOverlays != 0);
-                reply.recycle();
-                data.recycle();
-            }
-        } catch (RemoteException ex) {
-        }
-    }
-
-    void updateSwitchPreference(SwitchPreference switchPreference, boolean value) {
-        switchPreference.setChecked(value);
-        mHaveDebugSettings |= value;
-    }
-    static class SystemPropPoker extends AsyncTask<Void, Void, Void> {
-	@Override	
-        protected Void doInBackground(Void... params) {
-            String[] services;
-            try {
-                services = ServiceManager.listServices();
-            } catch (RemoteException e) {
-                return null;
-            }
-            for (String service : services) {
-                IBinder obj = ServiceManager.checkService(service);
-                if (obj != null) {
-                    Parcel data = Parcel.obtain();
-                    try {
-                        obj.transact(IBinder.SYSPROPS_TRANSACTION, data, null, 0);
-                    } catch (RemoteException e) {
-                    } 
-                    data.recycle();
-                }
-            }
-            return null;
-        }
-   }
-
-    @Override
-    public void onSwitchChanged(Switch switchView, boolean isChecked) {
-        if (switchView != mSwitchBar.getSwitch()) {
-            return;
-        }
-        if (isChecked != mLastEnabledState) {
-            if (isChecked) {
-                mDialogClicked = false;
-            } else {
-		mDialogClicked = true;
-            }
-        }
-    }
-
-    private void setPrefsEnabledState(boolean enabled) {
-        for (int i = 0; i < mAllPrefs.size(); i++) {
-            Preference pref = mAllPrefs.get(i);
-            pref.setEnabled(enabled && !mDisabledPrefs.contains(pref));
-        }
-        updateAllOptions();
-    }
-
-	private void updateAllOptions()
-	{
-	final Context context = getActivity();
-        final ContentResolver cr = context.getContentResolver();
-	updateHardwareUiOptions();
-	updateFlingerOptions();
-	updateAppProcessLimitOptions();
-	}
-
- private SwitchPreference findAndInitSwitchPref(String key) {
-        SwitchPreference pref = (SwitchPreference) findPreference(key);
-        if (pref == null) {
-            throw new IllegalArgumentException("Cannot find preference with key = " + key);
-        }
-        mAllPrefs.add(pref);
-        return pref;
-    }
-
-    private ListPreference addListPreference(String prefKey) {
-        ListPreference pref = (ListPreference) findPreference(prefKey);
-        mAllPrefs.add(pref);
-        pref.setOnPreferenceChangeListener(this);
-        return pref;
-    }
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-
-        final SettingsActivity activity = (SettingsActivity) getActivity();
-
-        mSwitchBar = activity.getSwitchBar();
-       if (mUnavailable) {
-            mSwitchBar.setEnabled(false);
-            return;
-        }
-
-        mSwitchBar.addOnSwitchChangeListener(this);
-    }
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        if (mUnavailable) {
-            return;
-        }
-        mSwitchBar.removeOnSwitchChangeListener(this);
-        mSwitchBar.hide();
-    }
-
-    private void removePreference1(Preference preference) {
-        getPreferenceScreen().removePreference(preference);
-        mAllPrefs.remove(preference);
-    }
-
-    private void resetDangerousOptions() {
-        mDontPokeProperties = true;
-        for (int i=0; i< mResetSwitchPrefs.size(); i++) {
-            SwitchPreference cb = mResetSwitchPrefs.get(i);
-            if (cb.isChecked()) {
-                cb.setChecked(false);
-                onPreferenceTreeClick(null, cb);
-            }
-        }
-	updateAllOptions();
-        mDontPokeProperties = false;
-        pokeSystemProperties();
-   }		
-}	
diff --git a/src/com/android/settings/maxi/Processor.java b/src/com/android/settings/maxi/Processor.java
deleted file mode 100644
index a77498a..0000000
--- a/src/com/android/settings/maxi/Processor.java
+++ /dev/null
@@ -1,342 +0,0 @@
-/*
- * Copyright (C) 2012-2014 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.settings.maxi;
-
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.os.SystemProperties;
-import android.os.SystemService;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceScreen;
-import android.util.Log;
-
-import com.android.settings.R;
-import com.android.settings.SettingsPreferenceFragment;
-import com.android.settings.Utils;
-
-import java.lang.Runtime;
-
-//
-// CPU Related Settings
-//
-public class Processor extends SettingsPreferenceFragment implements
-        Preference.OnPreferenceChangeListener {
-
-    public static final String CPU_ONLINE = "/sys/devices/system/cpu/cpu0/online";
-    public static final String FREQ_CUR_PREF = "pref_cpu_freq_cur";
-    public static final String SCALE_CUR_FILE = "/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq";
-    public static final String FREQINFO_CUR_FILE = "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq";
-    private static String FREQ_CUR_FILE = SCALE_CUR_FILE;
-    public static final String GOV_PREF = "pref_cpu_gov";
-    public static final String GOV_LIST_FILE = "/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors";
-    public static final String GOV_FILE = "/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor";
-    public static final String FREQ_MIN_PREF = "pref_cpu_freq_min";
-    public static final String FREQ_MAX_PREF = "pref_cpu_freq_max";
-    public static final String FREQ_LIST_FILE = "/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies";
-    public static String FREQ_MAX_FILE = null;
-    public static String FREQ_MIN_FILE = null;
-    public static final String SOB_PREF = "pref_cpu_set_on_boot";
-
-    protected static boolean freqCapFilesInitialized = false;
-
-    private static final String TAG = "CPUSettings";
-
-    private String mGovernorFormat;
-    private String mMinFrequencyFormat;
-    private String mMaxFrequencyFormat;
-
-    private Preference mCurFrequencyPref;
-    private ListPreference mGovernorPref;
-    private ListPreference mMinFrequencyPref;
-    private ListPreference mMaxFrequencyPref;
-
-    private class CurCPUThread extends Thread {
-        private boolean mInterrupt = false;
-
-        public void interrupt() {
-            mInterrupt = true;
-        }
-
-        @Override
-        public void run() {
-            try {
-                while (!mInterrupt) {
-                    sleep(500);
-                    final String curFreq = Utils.fileReadOneLine(FREQ_CUR_FILE);
-                    if (curFreq != null)
-                        mCurCPUHandler.sendMessage(mCurCPUHandler.obtainMessage(0, curFreq));
-                }
-            } catch (InterruptedException e) {
-            }
-        }
-    };
-
-    private CurCPUThread mCurCPUThread = new CurCPUThread();
-
-    private Handler mCurCPUHandler = new Handler() {
-        public void handleMessage(Message msg) {
-            mCurFrequencyPref.setSummary(toMHz((String) msg.obj));
-            updateCpufreqValues();
-        }
-    };
-
-    private void initFreqCapFiles()
-    {
-        if (freqCapFilesInitialized) return;
-        FREQ_MAX_FILE = getString(R.string.max_cpu_freq_file);
-        FREQ_MIN_FILE = getString(R.string.min_cpu_freq_file);
-        freqCapFilesInitialized = true;
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        initFreqCapFiles();
-
-        mGovernorFormat = getString(R.string.cpu_governors_summary);
-        mMinFrequencyFormat = getString(R.string.cpu_min_freq_summary);
-        mMaxFrequencyFormat = getString(R.string.cpu_max_freq_summary);
-
-        String[] availableFrequencies = new String[0];
-        String[] availableGovernors = new String[0];
-        String[] frequencies;
-        String availableGovernorsLine;
-        String availableFrequenciesLine;
-        String temp;
-
-        addPreferencesFromResource(R.xml.processor_settings);
-
-        PreferenceScreen prefScreen = getPreferenceScreen();
-
-        mGovernorPref = (ListPreference) prefScreen.findPreference(GOV_PREF);
-        mCurFrequencyPref = (Preference) prefScreen.findPreference(FREQ_CUR_PREF);
-        mMinFrequencyPref = (ListPreference) prefScreen.findPreference(FREQ_MIN_PREF);
-        mMaxFrequencyPref = (ListPreference) prefScreen.findPreference(FREQ_MAX_PREF);
-
-        /* Governor
-        Some systems might not use governors */
-        if (!Utils.fileExists(GOV_LIST_FILE) || !Utils.fileExists(GOV_FILE) || (temp = Utils.fileReadOneLine(GOV_FILE)) == null || (availableGovernorsLine = Utils.fileReadOneLine(GOV_LIST_FILE)) == null) {
-            prefScreen.removePreference(mGovernorPref);
-
-        } else {
-            availableGovernors = availableGovernorsLine.split(" ");
-
-            mGovernorPref.setEntryValues(availableGovernors);
-            mGovernorPref.setEntries(availableGovernors);
-            mGovernorPref.setValue(temp);
-            mGovernorPref.setSummary(String.format(mGovernorFormat, temp));
-            mGovernorPref.setOnPreferenceChangeListener(this);
-        }
-
-        // Disable the min/max list if we dont have a list file
-        if (!Utils.fileExists(FREQ_LIST_FILE) || (availableFrequenciesLine = Utils.fileReadOneLine(FREQ_LIST_FILE)) == null) {
-            mMinFrequencyPref.setEnabled(false);
-            mMaxFrequencyPref.setEnabled(false);
-
-        } else {
-            availableFrequencies = availableFrequenciesLine.split(" ");
-
-            frequencies = new String[availableFrequencies.length];
-            for (int i = 0; i < frequencies.length; i++) {
-                frequencies[i] = toMHz(availableFrequencies[i]);
-            }
-
-            // Min frequency
-            if (!Utils.fileExists(FREQ_MIN_FILE) || (temp = Utils.fileReadOneLine(FREQ_MIN_FILE)) == null) {
-                mMinFrequencyPref.setEnabled(false);
-
-            } else {
-                mMinFrequencyPref.setEntryValues(availableFrequencies);
-                mMinFrequencyPref.setEntries(frequencies);
-                mMinFrequencyPref.setValue(temp);
-                mMinFrequencyPref.setSummary(String.format(mMinFrequencyFormat, toMHz(temp)));
-                mMinFrequencyPref.setOnPreferenceChangeListener(this);
-            }
-
-            // Max frequency
-            if (!Utils.fileExists(FREQ_MAX_FILE) || (temp = Utils.fileReadOneLine(FREQ_MAX_FILE)) == null) {
-                mMaxFrequencyPref.setEnabled(false);
-
-            } else {
-                mMaxFrequencyPref.setEntryValues(availableFrequencies);
-                mMaxFrequencyPref.setEntries(frequencies);
-                mMaxFrequencyPref.setValue(temp);
-                mMaxFrequencyPref.setSummary(String.format(mMaxFrequencyFormat, toMHz(temp)));
-                mMaxFrequencyPref.setOnPreferenceChangeListener(this);
-            }
-        }
-
-        // Cur frequency
-        if (!Utils.fileExists(FREQ_CUR_FILE)) {
-            FREQ_CUR_FILE = FREQINFO_CUR_FILE;
-        }
-
-        if (!Utils.fileExists(FREQ_CUR_FILE) || (temp = Utils.fileReadOneLine(FREQ_CUR_FILE)) == null) {
-            mCurFrequencyPref.setEnabled(false);
-
-        } else {
-            mCurFrequencyPref.setSummary(toMHz(temp));
-
-            mCurCPUThread.start();
-        }
-    }
-
-    private void updateCpufreqValues() {
-        String temp;
-
-        if (Utils.fileExists(FREQ_MIN_FILE) && (temp = Utils.fileReadOneLine(FREQ_MIN_FILE)) != null) {
-            mMinFrequencyPref.setValue(temp);
-            mMinFrequencyPref.setSummary(String.format(mMinFrequencyFormat, toMHz(temp)));
-        }
-
-        if (Utils.fileExists(FREQ_MAX_FILE) && (temp = Utils.fileReadOneLine(FREQ_MAX_FILE)) != null) {
-            mMaxFrequencyPref.setValue(temp);
-            mMaxFrequencyPref.setSummary(String.format(mMaxFrequencyFormat, toMHz(temp)));
-        }
-
-        if (Utils.fileExists(GOV_FILE) && (temp = Utils.fileReadOneLine(GOV_FILE)) != null) {
-            mGovernorPref.setSummary(String.format(mGovernorFormat, temp));
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        initFreqCapFiles();
-        updateCpufreqValues();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        mCurCPUThread.interrupt();
-        try {
-            mCurCPUThread.join();
-        } catch (InterruptedException e) {
-        }
-    }
-
-    public boolean onPreferenceChange(Preference preference, Object value) {
-        initFreqCapFiles();
-
-        final String newValue = (String) value;
-        String fname = "";
-
-        if (newValue != null) {
-            if (preference == mGovernorPref) {
-                fname = GOV_FILE;
-            } else if (preference == mMinFrequencyPref) {
-                fname = FREQ_MIN_FILE;
-            } else if (preference == mMaxFrequencyPref) {
-                fname = FREQ_MAX_FILE;
-            }
-
-            if (Utils.fileWriteOneLine(fname, newValue)) {
-                final String file = fname;
-                final int nrcpus = Runtime.getRuntime().availableProcessors();
-                if (nrcpus > 1) {
-                    new Thread() {
-                        public void run() {
-                            int count = 0;
-                            int maxcount = 5;
-                            String on = "1";
-                            String off = "0";
-                            String onfile = "";
-                            String cpufile = "";
-                            String savedstate = "";
-                            String state = "";
-                            String mpdec = "mpdecision";
-                            SystemService.State mpdecstate = SystemService.getState(mpdec);
-                            // Dumb down to a running mpdecision service
-                            if (mpdecstate.equals(SystemService.State.RUNNING)) {
-                                SystemService.stop(mpdec);
-                            }
-                            try {
-                                for (int i = 1; i < nrcpus; i++) {
-                                    onfile = CPU_ONLINE.replace("cpu0", "cpu" + i);
-                                    cpufile = file.replace("cpu0", "cpu" + i);
-                                    savedstate = Utils.fileReadOneLine(onfile);
-                                    // Writing on to already online cpu throws EINVAL exception
-                                    if (savedstate.equals(off)) {
-                                        if (Utils.fileIsWritable(onfile)) {
-                                            Utils.fileWriteOneLine(onfile, on);
-                                        } else {
-                                            String hw = SystemProperties.get("ro.hardware");
-                                            Log.e(TAG, onfile +
-                                            " not writable, did you set ownership in init." +
-                                            hw + ".rc?");
-                                        }
-                                    }
-                                    // Give ueventd a little time to set perms
-                                    while (count < maxcount) {
-                                        Thread.sleep(10);
-                                        if (Utils.fileExists(cpufile)) {
-                                            if (Utils.fileIsWritable(cpufile)) {
-                                                Utils.fileWriteOneLine(cpufile, newValue);
-                                                break;
-                                            } else {
-                                                Log.e(TAG, cpufile +
-                                                " not writable, did you set ueventd rules?");
-                                            }
-                                        }
-                                        count++;
-                                        if (count == maxcount) {
-                                            Log.e(TAG, "Failed setting new value to " + cpufile);
-                                        }
-                                    }
-                                    count = 0;
-                                    state = Utils.fileReadOneLine(onfile);
-                                    // Restore prior state of onlined cpu
-                                    if (state.equals(on) && !state.equals(savedstate)) {
-                                        Utils.fileWriteOneLine(onfile, off);
-                                    }
-                                }
-                            } catch (InterruptedException e) {
-                            }
-                            // Restart mpdec
-                            if (mpdecstate.equals(SystemService.State.RUNNING)) {
-                                SystemService.start(mpdec);
-                            }
-                        }
-                    }.start();
-                }
-
-                if (preference == mGovernorPref) {
-                    mGovernorPref.setSummary(String.format(mGovernorFormat, newValue));
-                } else if (preference == mMinFrequencyPref) {
-                    mMinFrequencyPref.setSummary(String.format(mMinFrequencyFormat,
-                            toMHz(newValue)));
-                } else if (preference == mMaxFrequencyPref) {
-                    mMaxFrequencyPref.setSummary(String.format(mMaxFrequencyFormat,
-                            toMHz(newValue)));
-                }
-                return true;
-            } else {
-                return false;
-            }
-        }
-        return false;
-    }
-
-    private String toMHz(String mhzString) {
-        return new StringBuilder().append(Integer.valueOf(mhzString) / 1000).append(" MHz")
-                .toString();
-    }
-}
-- 
1.9.1

